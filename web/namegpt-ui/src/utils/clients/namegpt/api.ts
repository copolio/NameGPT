/* tslint:disable */
/* eslint-disable */
/**
 * NameGPT API
 * This is a NameGPT API server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GithubComCopolioNamegptInternalNamegptEntityDomainName
 */
export interface GithubComCopolioNamegptInternalNamegptEntityDomainName {
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityDomainName
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityDomainName
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityDomainName
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityDomainName
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityDomainName
     */
    'queryID'?: number;
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityDomainName
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface GithubComCopolioNamegptInternalNamegptEntityUser
 */
export interface GithubComCopolioNamegptInternalNamegptEntityUser {
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityUser
     */
    'createdAt'?: string;
    /**
     * 
     * @type {GormDeletedAt}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityUser
     */
    'deletedAt'?: GormDeletedAt;
    /**
     * 
     * @type {number}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityUser
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptInternalNamegptEntityUser
     */
    'updatedAt'?: string;
}
/**
 * 
 * @export
 * @interface GithubComCopolioNamegptPkgDtoRequestCreateUser
 */
export interface GithubComCopolioNamegptPkgDtoRequestCreateUser {
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptPkgDtoRequestCreateUser
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames
 */
export interface GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames {
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames
     */
    'description': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames
     */
    'previousResults'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames
     */
    'userId'?: string;
}
/**
 * 
 * @export
 * @interface GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames
 */
export interface GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames {
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames
     */
    'keyword': string;
    /**
     * 
     * @type {string}
     * @memberof GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames
     */
    'user'?: string;
}
/**
 * 
 * @export
 * @interface GormDeletedAt
 */
export interface GormDeletedAt {
    /**
     * 
     * @type {string}
     * @memberof GormDeletedAt
     */
    'time'?: string;
    /**
     * Valid is true if Time is not NULL
     * @type {boolean}
     * @memberof GormDeletedAt
     */
    'valid'?: boolean;
}

/**
 * V0Api - axios parameter creator
 * @export
 */
export const V0ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Pong!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PingGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a user info by name.
         * @param {string} name Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0UsersNameGet: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiV0UsersNameGet', 'name', name)
            const localVarPath = `/api/v0/users/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a user.
         * @param {GithubComCopolioNamegptPkgDtoRequestCreateUser} user Create user request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0UsersPost: async (user: GithubComCopolioNamegptPkgDtoRequestCreateUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('apiV0UsersPost', 'user', user)
            const localVarPath = `/api/v0/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V0Api - functional programming interface
 * @export
 */
export const V0ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V0ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Pong!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0PingGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0PingGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a user info by name.
         * @param {string} name Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0UsersNameGet(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubComCopolioNamegptInternalNamegptEntityUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0UsersNameGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a user.
         * @param {GithubComCopolioNamegptPkgDtoRequestCreateUser} user Create user request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV0UsersPost(user: GithubComCopolioNamegptPkgDtoRequestCreateUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GithubComCopolioNamegptInternalNamegptEntityUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV0UsersPost(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V0Api - factory interface
 * @export
 */
export const V0ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V0ApiFp(configuration)
    return {
        /**
         * 
         * @summary Pong!
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0PingGet(options?: any): AxiosPromise<string> {
            return localVarFp.apiV0PingGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a user info by name.
         * @param {string} name Username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0UsersNameGet(name: string, options?: any): AxiosPromise<GithubComCopolioNamegptInternalNamegptEntityUser> {
            return localVarFp.apiV0UsersNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a user.
         * @param {GithubComCopolioNamegptPkgDtoRequestCreateUser} user Create user request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV0UsersPost(user: GithubComCopolioNamegptPkgDtoRequestCreateUser, options?: any): AxiosPromise<GithubComCopolioNamegptInternalNamegptEntityUser> {
            return localVarFp.apiV0UsersPost(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V0Api - object-oriented interface
 * @export
 * @class V0Api
 * @extends {BaseAPI}
 */
export class V0Api extends BaseAPI {
    /**
     * 
     * @summary Pong!
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0Api
     */
    public apiV0PingGet(options?: AxiosRequestConfig) {
        return V0ApiFp(this.configuration).apiV0PingGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a user info by name.
     * @param {string} name Username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0Api
     */
    public apiV0UsersNameGet(name: string, options?: AxiosRequestConfig) {
        return V0ApiFp(this.configuration).apiV0UsersNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a user.
     * @param {GithubComCopolioNamegptPkgDtoRequestCreateUser} user Create user request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V0Api
     */
    public apiV0UsersPost(user: GithubComCopolioNamegptPkgDtoRequestCreateUser, options?: AxiosRequestConfig) {
        return V0ApiFp(this.configuration).apiV0UsersPost(user, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates domain names in server sent event.
         * @param {GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames} user Generate domain name recommendation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DomainsRecommendationsPost: async (user: GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('apiV1DomainsRecommendationsPost', 'user', user)
            const localVarPath = `/api/v1/domains/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get similar domain names given input
         * @param {GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames} q Generate similar domain name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DomainsSimilarNamesPost: async (q: GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'q' is not null or undefined
            assertParamExists('apiV1DomainsSimilarNamesPost', 'q', q)
            const localVarPath = `/api/v1/domains/similar-names`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(q, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Generates domain names in server sent event.
         * @param {GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames} user Generate domain name recommendation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DomainsRecommendationsPost(user: GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainsRecommendationsPost(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get similar domain names given input
         * @param {GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames} q Generate similar domain name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1DomainsSimilarNamesPost(q: GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GithubComCopolioNamegptInternalNamegptEntityDomainName>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1DomainsSimilarNamesPost(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * 
         * @summary Generates domain names in server sent event.
         * @param {GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames} user Generate domain name recommendation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DomainsRecommendationsPost(user: GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiV1DomainsRecommendationsPost(user, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get similar domain names given input
         * @param {GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames} q Generate similar domain name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1DomainsSimilarNamesPost(q: GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames, options?: any): AxiosPromise<Array<GithubComCopolioNamegptInternalNamegptEntityDomainName>> {
            return localVarFp.apiV1DomainsSimilarNamesPost(q, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI {
    /**
     * 
     * @summary Generates domain names in server sent event.
     * @param {GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames} user Generate domain name recommendation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public apiV1DomainsRecommendationsPost(user: GithubComCopolioNamegptPkgDtoRequestRecommendDomainNames, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).apiV1DomainsRecommendationsPost(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get similar domain names given input
     * @param {GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames} q Generate similar domain name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public apiV1DomainsSimilarNamesPost(q: GithubComCopolioNamegptPkgDtoRequestSimilarDomainNames, options?: AxiosRequestConfig) {
        return V1ApiFp(this.configuration).apiV1DomainsSimilarNamesPost(q, options).then((request) => request(this.axios, this.basePath));
    }
}


